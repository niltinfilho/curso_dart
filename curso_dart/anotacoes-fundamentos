--- PRIMEIRO PROGRAMA ---

Muito importante a gente notar o jeito da escrita da linguagem, por exemplo, toda
sentença de código é terminada com um ";". E todo bloco de código é delimitado com
"{}".

A porta de entrada de um programa em Dart é a função "main()", sem ela o programa
nunca vai ser compilado. E toda função vem acompanhada de "()", que pode ou não conter
um ou mais parâmetros.


--- VARIÁVEIS ---

Por Dart ser uma linguagem fortemente tipada, é necessário deixar explicito o tipo
da variável, sendo assim: 

  "tipo" "nome" = "valor";

Ex:

  int num1 = 3;

Em Dart, as variáveis e constantes têm algumas regras específicas para seus nomes:

1. Eles podem conter letras (maiúsculas e minúsculas), números e os caracteres "_"
ou "$".
2. O nome deve começar com uma letra (maiúscula ou minúscula) ou com um "_".
3. Não é permitido começar com um número.
4. Palavras reservadas não podem ser usadas.

Além disso, Dart é uma linguagem case-sensitive, o que significa que diferencia maiúsculas
de minúsculas. Isso significa que "nome" e "Nome" são considerados diferentes em Dart.

Para constantes, a única diferença é que elas *geralmente seguem a convenção de usar
letras maiúsculas e "_" para separar palavras, por exemplo:

  const double PI = 3.14;
  const int MAX_TENTATIVAS = 5;


PALAVRAS RESERVADAS PARA VARIÁVEIS

"var" é uma palavra reservada usada para declarar uma variável cujo tipo é inferido
pelo compilador com base no valor atribuído a ela. Isso significa que você não precisa
especificar o tipo da variável na declaração. Ex:

  var numero = 10; -> O tipo será inferido como int
  var nome = 'João'; -> O tipo será inferido como String

"int" é usado para representar números inteiros. Em Dart, os inteiros podem ser positivos
ou negativos, e não têm tamanho fixo.

"double" é usado para representar números de ponto flutuante, ou seja, números decimais.
Em Dart, os números de ponto flutuante podem representar valores fracionários.

"String" é usado para representar uma sequência de caracteres, delimitado por aspas
simples ou duplas ('' ou ""). 

"bool" é usado para representar valores booleanos, ou seja, true ou false. 

* Todos esses tipos são fortes, ou seja, uma vez declarada, aquela variável nunca
poderá trocar de tipo. Para isso existe outro tipo:

"dynamic" é usado para declarar variáveis cujos tipos podem ser alterados durante
a execução do programa. Ex:

  dynamic variavel = 10;
  variavel = 'Hello';


CONCATENAÇÃO E CONVERSÃO DE TIPOS

Quando se tratar de 2 strings, o operador "+" irá servir para concatenação (juntar). 
Ex: 

  var t1 = "Bom";
  var t2 = " Dia";
  print(t1 + t2);
  => Bom Dia

Também é possível concatenar variáveis com strings. Ex:

  print(t1 + t2 + '!!!');
  => Bom Dia!!!

E não é possível concatenar números com string, para isso você deve converter tudo
para string. Ex:

  var n1 = 2;
  var n2 = 4.56;
  print('O valor da soma é: ' + (n1 + n2).toString());
  => O valor da soma é: 6.56

Convertendo os tipos:

s1.toString() -> s1 para String
int.parse(n1) -> n1 para int
double.parse(n2) -> n2 para double


PALAVRAS RESERVADAS PARA CONSTANTES

Para criar uma constante você também pode especificar o tipo dela, ou deixar o compilador
inferir o tipo dela pelo conteúdo.

"final" é uma constante definida em runtime, ou seja, o valor será atribuído durante
a execução do programa, por exemplo uma entrada do usuário, que só vai ser digitado
quando o programa estiver rodando.

"const" é uma constante definida em tempo de compilação, ou seja, o valor foi atribuído
na declaração dela.

Ex:

  const PI = 3.1415;
  const double PI = 3.1415;

  final area = PI * raio * raio;
  final double area = PI * raio * raio;


--- TIPOS DE AGRUPAMENTO ---

"List" é uma coleção ordenada de elementos, onde podem ser acessados por meio de
um índice inteiro, começando pelo 0, e os elementos podem ser duplicados.
Uma lista é delimitada por "[]", com os elementos separados por vírgula, e para acessar
um item dentro da lista também é usado o "[]". Ex:

                  0       1        2...
  List nomes = ['Ana', 'Meire', 'Maria'];
  print(nomes[2]); -> valor no índice 2
  => Maria

"Map" é uma coleção de chave-valor, onde cada chave mapeia para um valor. As chaves
não podem ser repetidas, mas os valores sim, ambos podendo ser de qualquer tipo.
E para acessar um valor usa-se a própria chave.
Um map é delimitado por "{}", com os elementos separados por vírgula e declarados
na estrutura "key: value,". Ex:

  Map telefones = {
     key        value
    'Ana': '17 99999-9999',
    'Meire': '17 12345-6789',
    'Maria': '17 98765-4321',
  }
  print(telefones['Meire']); -> valor no índice 'Meire'
  print(telefones.keys); -> apenas as chaves
  print(telefones.values); -> apenas os valores
  => 17 98765-4321
  => (Ana, Meire, Maria)
  => (17 99999-9999, 17 12345-6789, 17 98765-4321)

"Set" é uma coleção de elementos únicos e não ordenados, ou seja, não podem ser acessados
por índices e não podem ser repetidos. Um set é delimitado por "{}", com os elementos
separados por vírgula. Ex:

  Set times = {'Vasco', 'Flamengo', 'Fortaleza', 'São Paulo'};
  print(times.first); -> primeiro valor
  print(times.last); -> último valor
  => Vasco
  => São Paulo

* Também é possível deixar o compilador inferir o tipo usando o "var" para declarar
um agrupamento.

* Tanto o List quanto o Set possui a mesma maneira de adicionar um elemento após
a declaração, que é o ".add('qualquercoisa');"

* RESUMINDO LIST, MAP E SET

List: Conjunto de elementos indexados a partir do 0, que aceita repetição e valores
homogêneos (mais de um tipo).
[ , , ];

Map: Estrutura de chave-valor, não aceitando repetição na chave mas sim no valor.
E é possível acessar o valor indexado pela chave.
{ : , : , : };

Set: Conjunto de elementos não indexados que não aceitam repetição.
{ , , };


--- NOTAÇÃO PONTO ---

n.roundToDouble() -> arredonda o número pra cima
n.truncateToDouble() -> arredonda para baixo, tira as casas decimais
s.toUpperCase() -> joga tudo para maiúsculo
s.toLowerCase() -> joga tudo para minúsculo
s.substring(0, 8) -> pega somente os caracteres "de" 0 "até" 8
s.padRight(20, '!') -> completa "os" 20 caracteres "com" !

*Também é possível "encadear" as notações ponto, dependendo do valor retornado da
ação anterior. Ex:

  var s5 = 'Nilton Filho'
    .substring(0, 6) -> retorna string
    .toUpperCase() -> retorna string
    .padRight(15, '!') -> retorna string
    .lenght -> retorna number
      -> teria que ser uma notação para number
      

--- OPERADORES ---

Aritméticos:

  + -> adição
  - -> subtração
  * -> multiplicação
  / -> divisão
  % -> módulo (resto da divisão)

Lógicos:

  && -> AND
  || -> OR
   ^ -> XOR (TEM que ser um OU outro)
   ! -> NOT

Atribuição (operações embutidas na variável):

  += | ++
  -= | --
  *=
  /=
  %=

Relacionais (o resultado sempre é bool):

   > -> maior que
  >= -> maior ou igual que
   < -> menor que
  <= -> menor ou igual que
  != -> diferente
  == -> igual

Condicional:

  teste ? se verdadeiro : se falso


ORDEM DE PRECEDÊNCIA DOS OPERADORES

  ()
  ++ --
  * /
  + -
  < > <= >=
  == !=
  && ||
  = += -= *= /= %=
  ?:


--- CONSTANTES EM LISTAS ---

  final lista = ['Ana', 'Gui', 'Maria'];
  lista.add('José');

  -> isso é possível pois o "final" nesse caso não significa que a lista não pode
  ser alterada, mas sim que ela não pode ser substituída

  final lista = ['Ana', 'Gui', 'Maria'];
  lista = ['Maçã', 'Banana', 'Pera']; -> AQUI SIM TEMOS UM ERRO

Para definar uma lista de itens como constante, basta adicionar "const" antes da
lista. Ex:

  final lista = const ['Ana', 'Gui', 'Maria'];
  lista.add('José'); -> agora aqui teremos um erro, pois os itens da lista não podem
  ser substituídos e nem alterados

Outra forma de garantir que os itens não serão alterados é definir a lista em si
como "const". Ex:

  const lista = ['Ana', 'Gui', 'Maria'];
  
  -> dessa forma os itens também não poderão ser alterados já que um "const" deve
  ser reconhecido em tempo de compilação


--- INTERPOLAÇÃO ---

  String nome = 'Nilton';
  String status = 'aprovado';
  double nota = 9.2;
  String frase1 = nome + ' está ' + status ' com a nota ' + nota.toString() + '!';
  String frase2 = '$nome está $status com a nota ${nota.toSttring()}!';
  
  -> a interpolação serve para unir variáveis ou operações em uma string, usando
  o $ para variável e ${} se houver alguma operação
  -> e para usar o cifrão como um caractere literal basta colocar uma \ antes. Ex:

  print('O preço é R\$20.00');


--- GENERICS EM LISTAS ---

  List<String> frutas = ['banana', 'maçã', 'laranja'];
  frutas.add(123); -> aqui teremos um erro pois a lista está fixa em string
  frutas.add('melão');

  Map<String, double> salarios = {
    'gerente': 1234.56,
    'vendedor': 6543.21,
    'estagiario': '9000.00', -> aqui teremos um erro, pois a chave tem que ser String
    e o valor double
  }