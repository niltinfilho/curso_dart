FUNCOES SEM RETORNO E SEM PARAMETROS

  numerosAleatorios() {
    n1 = Random().nextInt(11); -> gera um numero aleatorio de 0 a 10
    n2 = Random().nextInt(11);
    print($n1 e $n2);
  }

  Aqui temos uma funcao que nao pede parametros e nao retorna nada, apenas gera dois
  numeros aleatorios e imprime eles na tela.

  *Funcoes sem retorno podem ou nao iniciar com "void"


FUNCOES SEM RETORNO E COM PARAMETROS

  void somaComPrint(int a, int b) {
    print(a + b);
  }

  Para a funcao receber os parametros voce deve especificar o tipo deles, no caso,
  um int. Pode ser um ou mais parametros.


FUNCOES COM RETORNO E SEM PARAMETROS

  int numeroAleatorio() {
    num = Random().nextInt(11); 
    return num;
  }

  *Em caso de funcoes com retorno, eh preciso especificar o tipo do dado retornado
  antes do nome da funcao, no caso, um numero inteiro

  Essa funcao gera um numero aleatorio e retorna ele, eh util quando voce ira salvar
  esse numero em uma variavel para usar depois. No caso do "print" a funcao apenas 
  mostraria o numero na tela, o intuito do "return" eh jogar o numero na chamada
  da funcao


FUNCOES COM RETORNO E COM PARAMETROS

int somar(int a, int b) {
  return a + b;
}


PARAMETROS DE TIPOS DINAMICOS

Para usar um parametro de tipo dinamico voce pode explicitar "dynamic" ou apenas
deixar o nome do parametro. Exemplo:

  String juntar(dynamic a, b) {
    return a.toString() + b.toString();
  }

  Nesse caso eh uma funcao que retorna uma string e recebe 2 parametros do tipo dynamic,
  um explicito e outro oculto.

  *Note que o "dynamic" engloba apenas o "a", o "b" eh do tipo dynamic por conta
  da falta de um tipo especifico


PARAMETROS OPCIONAIS

Para um parametro se tornar opcional basta colocar ele entre "[]", e tambem eh interessante
colocar sempre um valor padrao caso esse parametro nao seja passado na invocacao
da funcao.

  int numeroAleatorio([int maximo = 11]) {
    return Random().nextInt(maximo);
  }

  Essa eh uma funcao que retorna um numero aleatorio de 0 ate o numero especificado
  na invocacao da funcao.

  Caso nenhum valor seja passado na invocacao da funcao, o numero maximo sera 10 (11 - 1).


PARAMETROS NOMEADOS

Para um parametro se tornar nomeado basta colocar ele entre "{}".

  saudarPessoa({String nome, int idade}) {
    print('Ola, $nome, nem parece que voce tem $idade anos!.');
  }

  Para invocar essa funcao seria:

  saudarPessoa(nome: 'Joao', idade: 18);

  ou

  saudarPessoa(idade: 23, nome: 'Maria');


PARAMETROS NOMEADOS vs PARAMETROS POSICIONAIS

Parametros posicionais sao os comuns, onde a ordem em que eles aparecem na funcao
eh a que voce deve colocar quando for chamar a funcao. Exemplo

  saudarPessoa(String nome, int idade) {
    print('Ola, $nome, nem parece que voce tem $idade anos!.');
  }

  Nesse caso, a chamada da funcao deveria ser obrigatoriamente nessa ordem:
  Primeiro o nome e depois a idade:

  saudarPessoa('Joao', 18);

Ja nos parametros nomeados essa ordem nao existe, ja que o valor passado na chamada
vai ser atribuido ao nome do parametro diretamente:

  saudarPessoa(idade: 23, nome: 'Maria');


PARAMETROS NOMEADOS OPCIONAIS

A estrutura da funcao eh a mesma dos parametros nomeados (entre "{}"), so precisa
definir um valor padrao para o parametro:

  imprimirData({int dia = 1, int mes = 1, int ano = 1970}) {
    print($dia/$mes/$ano);
  }

  E na chamada da funcao voce pode ou nao definir os parametros, e se sim, pode 
  ser na ordem que quiser.

  imprimirData();
  imprimirData(dia: 21);
  imprimirData(ano: 2004, mes: 7);
  imprimirData(mes: 12, ano: 2003, dia: 30);


FUNCAO EM VARIAVEL

Eh possivel fazer uma relacao entre esses tipos da seguinte forma:

A estrutura de uma variavel eh: tipo nome = valor

Uma funcao em variavel segue o mesmo caminho, porem com o tipo e o valor sendo um
pouco mais complexos, exemplo:

  tipo: int Function(int, int)
  Nesse caso eh uma funcao que recebe dois parametros inteiros e retorna tambem um inteiro

  nome: soma
  Somente o nome da variavel

  valor: (x, y) {
    return x + y;
  }
  E aqui temos os nomes dos parametros e o return da funcao

Ficando assim :

  int Function(int, int) soma = (x, y) {
    return x + y;
  }

  Eh uma funcao que recebe dois parametros inteiros (x e y), se chama "soma" e retorna
  um numero inteiro.

Tambem eh possivel simplificar a variavel deixando o dart inferir o tipo:

  var soma = ([int x = 1, int y = 1]) {
    return x + y;
  }

  No caso a propria linguagem entende que eh uma funcao e que vai retornar um numero
  inteiro, ja que seus parametros tambem sao inteiros.


ARROW FUNCTIONS

Essas funcoes eh uma simplificacao mais aprofundada do exemplo acima, implicitando
o "return":

  var soma = (int a, int b) => a + b;

  Nesse caso a "seta" (arrow) tem a funcao do "return"

E a linguagem, por inferencia, consegue saber o tipo de dado a ser retornado pela
funcao, exemplo:

  var divisao = (int a, int b) => a / b;

  Mesmo recebendo dois numeros inteiros, uma divisao tem grande chance de resultar
  em um numero quebrado, por isso a linguagem ja define o "return" como "double".


FUNCAO COMO PARAMETRO

O metodo eh exatamente o mesmo de um parametro normal, mas ao inves do tipo ser
"int", "double" ou "string", eh "Function", passando depois o nome do parametro.

  executar(Function fnPar, Function fnImpar) {
    Random().nextInt(10) % 2 == 0 ? fnPar() : fnImpar();
  }

  E a chamada da funcao fica:

  executar(fnPar, fnImpar);

  Nesse caso, essa eh uma funcao que recebe duas funcoes como parametro, gera um
  numero aleatorio de 0 a 9 e faz uma verificacao, caso for par, invoca a funcao
  "fnPar", e caso seja impar invoca a funcao "fnImpar".


FUNCAO FILTER

Eh um tipo de funcao que serve para filtrar uma lista gerando outra lista com os
elementos filtrados.

Para isso existem varios metodos, um deles eh usando o laco "for in":

  for(nota in notas) {
    if(nota >= 7) {
      notasBoas.add(nota);
    }
  }

  Considerando uma lista "notas" com varios elementos e "notasBoas" uma lista com
  as notas filtradas (maiores ou iguais a 7).

Outra forma de fazer isso eh usando uma funcao especifica da linguagem que eh o "where",
onde a propria funcao cria um laco de verificacao por baixo dos panos, deixando o
codigo bem mais simples:

  bool Function(double) notasBoasFn = (double nota) => nota >= 7;
  var notasBoas = notas.where(notasBoasFn);

  O "where" eh uma funcao que recebe um "double" e retorna um "bool", por isso criamos
  a funcao de verificacao usando esses dados, no caso, a funcao "notasBoasFn".

  E entao criamos uma nova lista "notasBoas" que vai receber apenas os valores filtrados,
  passando a lista "notas" para a funcao "where" que vai fazer a verificacao com
  base na  funcao "notasBoasFn".

Outra forma de filtrar uma lista eh criando sua propria funcao filter, dessa maneira
voce consegue usar apenas uma estrutura com varios filtros diferentes para cada situacao.

  List<E> fitrar<E>(List<E> lista, bool Function(E) fn) {
    List<E> listaFiltrada = [];
    for(E elemento in lista) {
      if(fn(elemento)) {
        listaFiltrada.add(elemento);
      }
    }
    return listaFiltrada;
  }

  Aqui temos uma funcao "filtrar" que recebe 2 parametros e retorna uma lista do
  tipo "E" (generics). O primeiro parametro eh uma lista do tipo "E", a geral. O
  segundo parametro eh uma funcao "fn" que recebe outro parametro do tipo "E" e retorna
  um valor booleano.
  Dentro da funcao eh criada a lista que vai receber os valores filtrados, que por
  enquanto eh vazia.
  Depois temos o "for in", que faz a validacao do teste e acrescenta elementos na
  nova lista. Esse laco percorre todos os elementos da lista geral fazendo uma verificacao
  "if", onde o teste eh gerenciado por uma funcao de fora ("fn"), criada junto com
  a chamada do teste, passando a lista que deve ser verificada como parametro.
  O "if" tambem eh responsavel por adicionar ou nao o elemento verificado na nova
  lista.
  E entao a lista filtrada eh retornada pela funcao.

Com relacao a criacao da funcao de teste:

  var boasNotasFn = (double nota) => nota >= 7.5;

  Aqui temos uma funcao que recebe um parametro, faz um teste e retorna um valor
  booleano.

  *Note que o segundo parametro da funcao filter eh justamente uma funcao que recebe
  um valor e retorna um boolean.

  Essa funcao vai ser responsavel pelo teste no "if" da funcao filter, recebendo
  cada elemento da lista e verificando se o valor eh maior ou igual a 7.5.

Com relacao a chamada da funcao filter:

  var somenteNotasBoas = filtrar<double>(notas, boasNotasFn);

  Ou seja, aqui criamos uma variavel que vai receber a lista filtrada pela funcao.
  Para isso, chamamos a funcao "filtrar", no caso, por ser notas de alunos, ela eh
  do tipo double, passando a lista geral "notas" e a funcao de teste "boasNotasFn"
  como parametros.

A vantagem de criar sua propria funcao filter eh conseguir fazer mais de um tipo
de testes. Usando o generics (do tipo "E") voce pode passar tanto valores int quanto
double, string, e assim por diante.
E tambem essa funcao pode ficar armazenada fora do codigo principal, em outro arquivo,
deixando assim o codigo bem mais legivel e facil de entender.


FUNCAO MAP

Essa funcao tem como objetivo transformar um tipo de dado em outro. No exemplo, nos
vamos transformar uma lista do tipo "map" em uma string, depois em "int" e depois
em "double".

Considerando um map com nomes de alunos e suas respectivas notas, sendo eles elementos
nomeados:

  var alunos = [
    {'nome': 'Nilton', 'nota': 9.9},
    {'nome': 'Arthur', 'nota': 8.7},
    {'nome': 'Duda', 'nota': 9.1},
    {'nome': 'Robertinho', 'nota': 5.6},
  ];

  String Function(Map) pegarNome = (aluno) => aluno['nome'];
  var nomes = alunos.map(pegarNome);

  Aqui temos uma funcao que recebe um map e filtra apenas as keys, no caso, os nomes
  dos alunos.
  E entao chamamos a funcao map passando a primeira funcao como parametro, que vai
  servir como "teste" do filtro, e salvamos em uma variavel.

  int Function(String) qtdDeLetras = (nome) => nome.lenght;
  var letras = nomes.map(qtdDeLetras);

  E aqui temos uma funcao que pega os nomes e retorna a quantidade de letras de
  cada nome.

  double Function(int) dobro = (letras) => letras * 2;
  var letrasDobro = letras.map(dobro);

  E por fim, uma funcao que pega a quantidade de letras de cada nome e multiplica
  por 2.

*A funcao map nao gera uma lista nem maior nem menor que a original, ela obrigatoriamente
tem que ter o mesmo tamanho da lista original.


FUNCAO REDUCE

Diferentemente da funcao map, que sempre gera uma lista do mesmo tamanho que a original, a funcao "reduce" serve para reduzir o tamanho de uma lista.

E assim como no "map", a funcao "reduce" precisa de uma outra funcao como parametro para servir de "teste".

Considerando uma lista com varias notas de alunos:

  double somar(double a, double b) {
    return a + b;
  }

  Aqui temos uma funcao que recebe dois parametros do tipo "double", soma esses valores e retorna o resultado tambem como "double".

  var total = notas.reduce(somar);

  E aqui temos a chamada da funcao "reduce" passando a funcao "somar" como parametro.
  Nesse caso, o reduce vai colocar o primeiro valor da lista como "a" e o segundo
  valor como "b", e entao vai somar esses dois valores. No laco seguinte, o resultado
  da primeira soma vai ser colocado em "a" e o terceiro valor da lista em "b", e
  o resultado dessa soma sera colocado novamente em "a" e o proximo valor em "b",
  e assim por diante ate finalizar a lista inteira.
  Ou seja, o primeiro paramentro da funcao "somar" sera um acumulador e o segundo
  paramentro um elemento de soma.