FUNCOES SEM RETORNO E SEM PARAMETROS

  numerosAleatorios() {
    n1 = Random().nextInt(11); -> gera um numero aleatorio de 0 a 10
    n2 = Random().nextInt(11);
    print($n1 e $n2);
  }

  Aqui temos uma funcao que nao pede parametros e nao retorna nada, apenas gera dois
  numeros aleatorios e imprime eles na tela.

  *Funcoes sem retorno podem ou nao iniciar com "void"


FUNCOES SEM RETORNO E COM PARAMETROS

  void somaComPrint(int a, int b) {
    print(a + b);
  }

  Para a funcao receber os parametros voce deve especificar o tipo deles, no caso,
  um int. Pode ser um ou mais parametros.


FUNCOES COM RETORNO E SEM PARAMETROS

  int numeroAleatorio() {
    num = Random().nextInt(11); 
    return num;
  }

  *Em caso de funcoes com retorno, eh preciso especificar o tipo do dado retornado
  antes do nome da funcao, no caso, um numero inteiro

  Essa funcao gera um numero aleatorio e retorna ele, eh util quando voce ira salvar
  esse numero em uma variavel para usar depois. No caso do "print" a funcao apenas 
  mostraria o numero na tela, o intuito do "return" eh jogar o numero na chamada
  da funcao


FUNCOES COM RETORNO E COM PARAMETROS

int somar(int a, int b) {
  return a + b;
}


PARAMETROS DE TIPOS DINAMICOS

Para usar um parametro de tipo dinamico voce pode explicitar "dynamic" ou apenas
deixar o nome do parametro. Exemplo:

  String juntar(dynamic a, b) {
    return a.toString() + b.toString();
  }

  Nesse caso eh uma funcao que retorna uma string e recebe 2 parametros do tipo dynamic,
  um explicito e outro oculto.

  *Note que o "dynamic" engloba apenas o "a", o "b" eh do tipo dynamic por conta
  da falta de um tipo especifico


PARAMETROS OPCIONAIS

Para um parametro se tornar opcional basta colocar ele entre "[]", e tambem eh interessante
colocar sempre um valor padrao caso esse parametro nao seja passado na invocacao
da funcao.

  int numeroAleatorio([int maximo = 11]) {
    return Random().nextInt(maximo);
  }

  Essa eh uma funcao que retorna um numero aleatorio de 0 ate o numero especificado
  na invocacao da funcao.

  Caso nenhum valor seja passado na invocacao da funcao, o numero maximo sera 10 (11 - 1).


PARAMETROS NOMEADOS

Para um parametro se tornar nomeado basta colocar ele entre "{}".

  saudarPessoa({String nome, int idade}) {
    print('Ola, $nome, nem parece que voce tem $idade anos!.');
  }

  Para invocar essa funcao seria:

  saudarPessoa(nome: 'Joao', idade: 18);

  ou

  saudarPessoa(idade: 23, nome: 'Maria');


PARAMETROS NOMEADOS vs PARAMETROS POSICIONAIS

Parametros posicionais sao os comuns, onde a ordem em que eles aparecem na funcao
eh a que voce deve colocar quando for chamar a funcao. Exemplo

  saudarPessoa(String nome, int idade) {
    print('Ola, $nome, nem parece que voce tem $idade anos!.');
  }

  Nesse caso, a chamada da funcao deveria ser obrigatoriamente nessa ordem:
  Primeiro o nome e depois a idade:

  saudarPessoa('Joao', 18);

Ja nos parametros nomeados essa ordem nao existe, ja que o valor passado na chamada
vai ser atribuido ao nome do parametro diretamente:

  saudarPessoa(idade: 23, nome: 'Maria');


PARAMETROS NOMEADOS OPCIONAIS

A estrutura da funcao eh a mesma dos parametros nomeados (entre "{}"), so precisa
definir um valor padrao para o parametro:

  imprimirData({int dia = 1, int mes = 1, int ano = 1970}) {
    print($dia/$mes/$ano);
  }

  E na chamada da funcao voce pode ou nao definir os parametros, e se sim, pode 
  ser na ordem que quiser.

  imprimirData();
  imprimirData(dia: 21);
  imprimirData(ano: 2004, mes: 7);
  imprimirData(mes: 12, ano: 2003, dia: 30);


FUNCAO EM VARIAVEL

Eh possivel fazer uma relacao entre esses tipos da seguinte forma:

A estrutura de uma variavel eh: tipo nome = valor

Uma funcao em variavel segue o mesmo caminho, porem com o tipo e o valor sendo um
pouco mais complexos, exemplo:

  tipo: int Function(int, int)
  Nesse caso eh uma funcao que recebe dois parametros inteiros e retorna tambem um inteiro

  nome: soma
  Somente o nome da variavel

  valor: (x, y) {
    return x + y;
  }
  E aqui temos os nomes dos parametros e o return da funcao

Ficando assim :

  int Function(int, int) soma = (x, y) {
    return x + y;
  }

  Eh uma funcao que recebe dois parametros inteiros (x e y), se chama "soma" e retorna
  um numero inteiro.

Tambem eh possivel simplificar a variavel deixando o dart inferir o tipo:

  var soma = ([int x = 1, int y = 1]) {
    return x + y;
  }

  No caso a propria linguagem entende que eh uma funcao e que vai retornar um numero
  inteiro, ja que seus parametros tambem sao inteiros.


ARROW FUNCTIONS

Essas funcoes eh uma simplificacao mais aprofundada do exemplo acima, implicitando
o "return":

  var soma = (int a, int b) => a + b;

  Nesse caso a "seta" (arrow) tem a funcao do "return"

E a linguagem, por inferencia, consegue saber o tipo de dado a ser retornado pela
funcao, exemplo:

  var divisao = (int a, int b) => a / b;

  Mesmo recebendo dois numeros inteiros, uma divisao tem grande chance de resultar
  em um numero quebrado, por isso a linguagem ja define o "return" como "double".


FUNCAO COMO PARAMETRO

O metodo eh exatamente o mesmo de um parametro normal, mas ao inves do tipo ser
"int", "double" ou "string", eh "Function", passando depois o nome do parametro.

  executar(Function fnPar, Function fnImpar) {
    Random().nextInt(10) % 2 == 0 ? fnPar() : fnImpar();
  }

  E a chamada da funcao fica:

  executar(fnPar, fnImpar);

  Nesse caso, essa eh uma funcao que recebe duas funcoes como parametro, gera um
  numero aleatorio de 0 a 9 e faz uma verificacao, caso for par, invoca a funcao
  "fnPar", e caso seja impar invoca a funcao "fnImpar".